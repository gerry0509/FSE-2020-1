FSE 2020-1 -- Practica 2



Nombres de los integrantes:
Arenas Olguín José Gerardo 
Cortés Reyes Tanya Cecilia 


Comentarios y Respuestas a las preguntas 



2. Lenguaje ensamblador 

*Invesigue la instrucción swi, sus parámetros y su función dentro
de un programa .s

La instrucción SWI (Software Interrupt) se usa para ingresar al modo Supervisor y
configurar la PC para que ejecute la siguiente instrucción en la dirección immed_8

Sintaxis: SWI immed_8 
donde immed_8 es una expresión numérica que evalúa un número entero en el rango 0-255

Fuentes: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0068b/BABFCEEG.html

3. Manejando cadenas 

En el programa hello.s, comente el código para describir su funcionamiento. En el archivo README, ponga
los comentarios para dichas lineas, describiendo su funcionamiento y diga conceptualmente que es lo que el
código está haciendo.

	.text
	.global _start

_start:

	@ Escribe 4 en r7 
	mov	r7,#4
	@Escribe 1 en r0 
	mov	r0,#1
	
        @Guarda en r1 la dirección de memoria donde está almacenada message
	ldr	r1,=message
	@ Escribe 14 en r2
	
        mov 	r2,#14
	@ Genera llamada al supervisor
	svc	#0
	@Escribe 1 en r7
	mov	r7,#1
	@Escribe 0 en r0
	mov	r0,#0
	@Genera llamada al supervisor 
	svc	#0
	
	@ A partir de .data se enumeran variables con valor inicial
       .data

message:

	@Ensambla cada cadena en direcciones consecutivas
       .ascii "Hola mundo\n"


El código escribe valores correspondientes a diferentes registros para finalmente
almacenar en uno de los registros la dirreción de memoria donde se encuentra una 
etiqueta (función) la cual contiene la instrucción .ascii la cual ensambla una 
cadena dada en las direcciones consecutivas. Se debe aclarar que el registro consecutivo
al registro que contiene la dirección de la etiqueta (en este caso r2) reserva el 
espacio necesario para guardar la cadena en su totalidad y caracter por caracter 

Referencias: https://eprints.ucm.es/27330/1/FC_ManualLaboratorio.pdf

5. Preguntas

(a) ¿Cuál es la diferencia entre las instrucciones swi 0x0, svc #0 y bx lr? 

* Tanto swi como svc son instrucciones que causan excpeciones. Lo que provoca que
cambien a modo Supervisor lo que permite configurar la PC para ejecutar la siguiente
instrucción en la dirección indicada. SVC fue llamado SWI en versiones anteriores
al lenguaje ensamblador ARM.

La instrucción bx lr simplemente nos permite retornar de una subrutina, es decir
las tres instrucciones nos permiten realizar saltos aunque de manera distinta.  

(b)A que se refiere la instrucción .balign 4 en el lenguaje ensamblador para ARM? 

La directiva .balign N le indica al ensamblador que el siguiente dato que vaya a 
reservarse o inicializarse, debe comenzar en una dirección de memoria múltiplo de 
N. En este caso, se le inica al ensamblador que las siguientes direcciones a reservar
en la memoria deben comenzar con múltiplos de 4

(c) ¿Cuántas instrucciones en lenguaje ensamblador hay para la arquitectura ARM11
y cuántos modos de direccionamiento hay (mencionelos)? 

Dentro de la arquitectura ARM11 existen dos conjuntos de instrucciones: ARM y THUMB
Cabe destacar que los modos de direccionamiento  están relacionadas con los conjuntos
de instrucciones que se utilicen. Por lo que un juego de instrucciones THUMB no tendrá
los mismos modos de direccionamiento que un conjunto de instrucciones ARM debido a que 
ARM utiliza instrucciones fijas de 32 bit mientras que THUMB utiliza Instrucciones fijas 
de 16 bits. 

-- Modos de direccionamiento ARM

* Inmediato (o literal): En este modo es el operando el que figura en la instrucción no su 
dirección

* Directo: El campo de operando en la instrucción contiene la dirección en memoria donde se 
encuentra el operando.

*Indirecto: El campo de operando contiene una dirección de memoria, en la que se encuentra la dirección
efectiva del operando.

--Modos de direccionamiento THUMB

*Directo a Registro: el operando se encuentra en un registro. 
En la instrucción simplemente se debe codificar en qué registro se encuentra el operando
 
*Inmediato: En el modo de direccionamiento inmediato, el operando está en la
propia instrucción

*Relativo a registro con desplazamiento: , la dirección efectiva del operando es una dirección de memoria
que se obtiene sumando el contenido de un registro y un desplazamiento
especificado en la propia instrucción

*Relativo a registo con registro de desplazamiento: La dirección efectiva del operando es una dirección de
memoria que se obtiene sumando el contenido de dos registros. Por tanto, si un operando utiliza este modo de direccionamiento, el formato de
instrucción deberá proporcionar dos campos para dicho operando: uno para cada registro.

De manera general el conjunto de todos los direccionamientos y las instrucciones, forman un aproximado
de más de 100 instrucciones.

Referencias: 
https://riuma.uma.es/xmlui/bitstream/handle/10630/10214/LibroDePracticas.pdf?sequence=1&isAllowed=y
http://lorca.act.uji.es/libro/practARM/CAP01_ebook.pdf
https://eprints.ucm.es/27330/1/FC_ManualLaboratorio.pdf
http://www.keil.com/support/man/docs/armasm/armasm_dom1361289909139.htm
https://heyrick.eu/assembler/swi.html
http://lorca.act.uji.es/libro/practARM/CAP04_ebook.pdf
http://www.electron.frba.utn.edu.ar/upload/Materias/95-0429/archivos/2008/Guia_de_clase_Microcontroladors_de_32_bits_%20ARM7.pdf
https://books.google.com.mx/books?id=aBPTCQAAQBAJ&printsec=frontcover&source=gbs_ge_summary_r&cad=0#v=onepage&q=3.71&f=false


